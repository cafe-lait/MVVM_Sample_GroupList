<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:System="clr-namespace:System;assembly=mscorlib">

    <!-- Default Setting -->
    <System:Double x:Key="ThumbSize"></System:Double>
    <System:Double x:Key="TrackWidth">15</System:Double>
    <System:Double x:Key="DefaultFontSize">14</System:Double>
    <FontFamily x:Key="DefaultFont">Meiryo UI</FontFamily>
    <Style x:Key="TextStyle" TargetType="TextBlock" />
    <Style x:Key="BackStyle" TargetType="Grid"/>

    <!--<SolidColorBrush x:Key="BackBrush" Color="#FF333333" />
    <SolidColorBrush x:Key="BackBrush_Light" Color="#FFEEEEEF" />
    <SolidColorBrush x:Key="BackBrush_GUI" Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="BackBrush_Text" Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="FrontBrush" Color="#FFBBBBBB"/>
    <SolidColorBrush x:Key="FrontBrush_Dark" Color="#FF222222"/>
    <SolidColorBrush x:Key="FrontBrush_GUII" Color="#FF000000"/>
    <SolidColorBrush x:Key="SelectBrush" Color="#FF000000"/>
    <SolidColorBrush x:Key="SelectBrush_Light" Color="#FFFFB6C1"/>
    <SolidColorBrush x:Key="SelectBrush_Dark" Color="#FF888888"/>
    <SolidColorBrush x:Key="UnselectBrush" Color="Transparent"/>
    <SolidColorBrush x:Key="SplitBrush" Color="Transparent"/>
    <SolidColorBrush x:Key="SplitLightBrush" Color="#FF777777"/>-->

    <SolidColorBrush x:Key="BackBrush"             Color="#FF333333" />
    <SolidColorBrush x:Key="BackBrush_Light"     Color="#FF333333" />
    <SolidColorBrush x:Key="BackBrush_GUI"      Color="#FF222222" />
    <SolidColorBrush x:Key="BackBrush_Text"     Color="#FF222222" />
    <SolidColorBrush x:Key="FrontBrush"             Color="#FFBBBBBB"/>
    <SolidColorBrush x:Key="FrontBrush_Dark"    Color="#FFBBBBBB"/>
    <SolidColorBrush x:Key="FrontBrush_GUII"    Color="#FFFFB6C1"/>
    <SolidColorBrush x:Key="SelectBrush"            Color="#8FFFB6C1"/>
    <SolidColorBrush x:Key="SelectBrush_Light"  Color="#FFFFB6C1"/>
    <SolidColorBrush x:Key="SelectBrush_Dark"   Color="#30FFB6C1"/>
    <SolidColorBrush x:Key="UnselectBrush"        Color="Transparent"/>
    <SolidColorBrush x:Key="SplitBrush"              Color="Transparent"/>
    <SolidColorBrush x:Key="SplitLightBrush"        Color="#FF333333"/>

    <!-- Dynamc Gradient Color -->
    <LinearGradientBrush x:Key="DefaultPriorityBrush" StartPoint="0,0" EndPoint="1,1">
        <GradientStop Color="#FF8F2929" Offset="0.0" />
        <GradientStop Color="#FFDDA43D" Offset="0.25" />
        <GradientStop Color="#FFCBDA35" Offset="0.5" />
        <GradientStop Color="#FF5FDB26" Offset="0.75" />
        <GradientStop Color="#FF2ED3E0" Offset="1" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="HolidayPriorityBrush" StartPoint="0,0" EndPoint="1,1">
        <GradientStop Color="#FF8F2929" Offset="0.0" />
        <GradientStop Color="#FFDDA43D" Offset="0.25" />
        <GradientStop Color="#FFCBDA35" Offset="0.5" />
        <GradientStop Color="#FF5FDB26" Offset="0.75" />
        <GradientStop Color="#FF2ED3E0" Offset="1" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="HighPriorityBrush" StartPoint="0,0" EndPoint="1,1">
        <GradientStop Color="#FF8F2929" Offset="0.0" />
        <GradientStop Color="#FFBB2727" Offset="0.25" />
        <GradientStop Color="#FFDA6235" Offset="0.5" />
        <GradientStop Color="#FFE46E4B" Offset="0.75" />
        <GradientStop Color="#FFE02E2E" Offset="1" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="LowPriorityBrush" StartPoint="0,0" EndPoint="1,1">
        <GradientStop Color="#FF2496E6" Offset="0.0" />
        <GradientStop Color="#FF268BD1" Offset="0.25" />
        <GradientStop Color="#FF2C72AB" Offset="0.5" />
        <GradientStop Color="#FF1C85CD" Offset="0.75" />
        <GradientStop Color="#FF2496E6" Offset="1" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="NormalPriorityBrush" EndPoint="1,0.5" StartPoint="0,0.5">
        <GradientStop Color="Orange" />
        <GradientStop Color="Yellow" Offset="0.5" />
        <GradientStop Color="Lime" Offset="1" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="CustomPriorityBrush" EndPoint="0,0.5" StartPoint="1,0.5">
        <GradientStop Color="#FF41A2AD" />
        <GradientStop Color="#FF44646F" Offset="0.4" />
        <GradientStop Color="#FF0E0F0F" Offset="1" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="CustomBorderBrush"  StartPoint="0,0" EndPoint="1,1">
        <GradientStop Color="Yellow" Offset="0.0" />
        <GradientStop Color="Red" Offset="0.15" />
        <GradientStop Color="Blue" Offset="0.3" />
        <GradientStop Color="LimeGreen" Offset="0.45" />
        <GradientStop Color="Yellow" Offset="0.6" />
        <GradientStop Color="Red" Offset="0.75" />
        <GradientStop Color="Blue" Offset="0.90" />
        <GradientStop Color="LimeGreen" Offset="1" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="WindowTitleBarBrush" EndPoint="0,0.5" StartPoint="1,0.5">
        <GradientStop Color="#FF41A2AD" Offset="1" />
        <GradientStop Color="#FF44646F" Offset="0.6" />
        <GradientStop Color="#FF0E0F0F" />
    </LinearGradientBrush>

    <!-- Window Style -->
    <Style x:Key="DefaultWindowStyle" TargetType="{x:Type Window}">
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome CornerRadius="3" GlassFrameThickness="0" ResizeBorderThickness="111" UseAeroCaptionButtons="False" 
                              CaptionHeight="{DynamicResource CaptionHeight}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FontSize" Value="{DynamicResource DefaultFontSize}"/>
    </Style>

    <!-- Def Textblock -->
    <Style x:Key="DefaultTextBlock" TargetType="TextBlock">
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFont}"/>
        <Setter Property="FontSize" Value="{DynamicResource DefaultFontSize}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource FrontBrush}" />
    </Style>

    <!-- TextBlock like Box -->
    <Style x:Key="TextBlockBox" TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="{DynamicResource BackBrush_Text}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="SelectionOpacity" Value="0.5" />
        <Setter Property="CaretBrush" Value="{DynamicResource SelectBrush}" />
        <Setter Property="SelectionBrush" Value="{DynamicResource SelectBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource DefaultFontSize}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFont}" />
    </Style>

    <!--  ToolTip -->
    <Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}">
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFont}"/>
        <Setter Property="FontSize" Value="{DynamicResource DefaultFontSize}" />
        <Setter Property="Background" Value="{DynamicResource BackBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource FrontBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource SelectBrush}" />
    </Style>

    <Style x:Key="CaptionButtonStyleKey" TargetType="{x:Type Button}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Foreground" Value="#AAFFFFFF" />
        <Setter Property="BorderBrush" Value="#AAFFFFFF" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FontFamily" Value="Marlett"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Margin" Value="0.5,5,0.5,5" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" Background="Transparent" SnapsToDevicePixels="True" HorizontalAlignment="Stretch">
                        <Border.Effect>
                            <DropShadowEffect Opacity="0"/>
                        </Border.Effect>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="border">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.6"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="border">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="border">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Effect).(DropShadowEffect.ShadowDepth)" Storyboard.TargetName="border">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Effect).(DropShadowEffect.Color)" Storyboard.TargetName="border">
                                            <EasingColorKeyFrame KeyTime="0" Value="White"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Effect).(DropShadowEffect.Opacity)" Storyboard.TargetName="border">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.6"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" Margin="0"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- マウスオーバー -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="border" Property="Background" Value="#FF555555" />
                            <Setter Property="Foreground" Value="#FFFFFFFF"/>
                        </Trigger>
                        <!-- ボタンを押した時に、背景色を透過 -->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="Transparent" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    </Style>


    <Style x:Key="CaptionButtonCloseStyleKey" TargetType="{x:Type Button}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Foreground" Value="#AAFFFFFF" />
        <Setter Property="BorderBrush" Value="#AAFFFFFF" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FontFamily" Value="Marlett"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Margin" Value="0.5,5,0.5,5" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" Background="Transparent" SnapsToDevicePixels="True" HorizontalAlignment="Stretch">
                        <Border.Effect>
                            <DropShadowEffect Opacity="0"/>
                        </Border.Effect>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="border">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.6"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="border">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="border">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Effect).(DropShadowEffect.ShadowDepth)" Storyboard.TargetName="border">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Effect).(DropShadowEffect.Color)" Storyboard.TargetName="border">
                                            <EasingColorKeyFrame KeyTime="0" Value="White"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Effect).(DropShadowEffect.Opacity)" Storyboard.TargetName="border">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.6"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" Margin="0"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- マウスオーバー -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="border" Property="Background" Value="#FF990000" />
                            <Setter Property="Foreground" Value="#FFFFFFFF"/>
                        </Trigger>
                        <!-- ボタンを押した時に、背景色を透過 -->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="Transparent" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    </Style>

    <!-- カスタムボタンのスタイル -->
    <Style TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource FrontBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource FrontBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Name="HoverButtonBorder" BorderThickness="0.8" BorderBrush="{DynamicResource FrontBrush}" 
                                Background="Transparent">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- マウスオーバー -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="HoverButtonBorder" Property="BorderBrush" Value="{DynamicResource SelectBrush_Light}" />
                            <Setter TargetName="HoverButtonBorder" Property="Background" Value="Transparent" />
                            <Setter Property="Foreground" Value="{DynamicResource SelectBrush_Light}"/>
                        </Trigger>
                        <!-- ボタンを押した時に、背景色を透過 -->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="HoverButtonBorder" Property="Background" Value="Transparent" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    
    <!-- カスタムボタンのスタイル -->
    <Style x:Key="FlatSubMenuButtun" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource FrontBrush_Dark}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Name="HoverButtonBorder" BorderThickness="0.8" BorderBrush="{DynamicResource FrontBrush_Dark}" 
                                Background="Transparent">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- マウスオーバー -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="HoverButtonBorder" Property="BorderBrush" Value="{DynamicResource SelectBrush}" />
                            <Setter TargetName="HoverButtonBorder" Property="Background" Value="{DynamicResource BackBrush_Light}" />
                            <Setter Property="Foreground" Value="{DynamicResource SelectBrush}"/>
                        </Trigger>
                        <!-- ボタンを押した時に、背景色を透過 -->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="HoverButtonBorder" Property="Background" Value="Transparent" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Menu Icon -->
    <ControlTemplate x:Key="MenuIconTemplate" TargetType="Button">
        <Border Name="border" BorderThickness="1" BorderBrush="{DynamicResource UnselectBrush}">
            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center">
                <ContentPresenter.ContentTemplate>
                    <DataTemplate>
                        <Image Source="{Binding}"/>
                    </DataTemplate>
                </ContentPresenter.ContentTemplate>
            </ContentPresenter>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource SelectBrush}">
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--<ControlTemplate x:Key="MenuIconTemplateToggle" TargetType="ToggleButton">
        <Border Name="border" BorderThickness="1" BorderBrush="{DynamicResource UnselectBrush}">
            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center">
                <ContentPresenter.ContentTemplate>
                    <DataTemplate>
                        <Image Source="{Binding}"/>
                    </DataTemplate>
                </ContentPresenter.ContentTemplate>
            </ContentPresenter>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource SelectBrush}">
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>-->

    <!-- ToggleButton -->
    <Style TargetType="ToggleButton" x:Key="TagToggleTemplate">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource SelectBrush}"/>
        <Setter Property="FontSize" Value="{DynamicResource DefaultFontSize}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Checked" >
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="Opacity" To="1"/>
                                        <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Background_Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                            <SplineColorKeyFrame KeyTime="00:00:01" Value="#54ff9999"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked" >
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="Opacity" To="1"/>
                                        <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Background_Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                            <SplineColorKeyFrame KeyTime="00:00:01" Value="Transparent"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused" />
                                <VisualState x:Name="Unfocused" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="Background_Border" Background="Transparent" BorderThickness="0" BorderBrush="Transparent" >
                            <Grid Background="Transparent" >
                                <Border Opacity="0" x:Name="BackgroundAnimation" Background="Transparent" BorderThickness="0" />
                                <!--<Rectangle x:Name="BackgroundGradient" >
                                        <Rectangle.Fill>
                                            <SolidColorBrush Color="Transparent" Opacity="0.25" />
                                        </Rectangle.Fill>
                                    </Rectangle>-->
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter"  Content="{TemplateBinding Content}" 
                                              ContentTemplate="{TemplateBinding ContentTemplate}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}"/>
                        <Rectangle x:Name="DisabledVisualElement" RadiusX="3" RadiusY="3" Fill="Transparent" Opacity="0" IsHitTestVisible="False" />
                        <Rectangle x:Name="FocusVisualElement" Margin="0" Stroke="Transparent" StrokeThickness="0" Opacity="0" IsHitTestVisible="False" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Border Style WithinFocus -->
    <Style x:Key="BorderStyle_WithinFocus" TargetType="{x:Type Border}">
        <!--マウスオーバーで選択状態をtrueにする設定-->
        <Style.Triggers>
            <!-- Select Trigger Style -->
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="BorderBrush" 
                                        Value="{DynamicResource SelectBrush}"/>
                <Setter Property="BorderThickness" Value="1"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="false">
                <Setter Property="BorderBrush" 
                                        Value="{DynamicResource SelectBrush}"/>
                <Setter Property="BorderThickness" Value="0.6"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Tab -->
    <Style x:Key="noHeaderTabItemStyle" 
               TargetType="{x:Type TabItem}">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Background" Value="{DynamicResource BackBrush}"/>
        <Setter Property="LayoutTransform">
            <Setter.Value>
                <TransformGroup>
                    <ScaleTransform ScaleY="0"/>
                    <SkewTransform/>
                    <RotateTransform/>
                    <TranslateTransform/>
                </TransformGroup>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- CustomConbo -->
    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <Border
                  x:Name="Border" 
                  Grid.ColumnSpan="2"
                  CornerRadius="0"
                  Background="{DynamicResource BackBrush}"
                  BorderBrush="{DynamicResource SelectBrush}"
                  BorderThickness="0.7" />
            <Border 
                  Grid.Column="0"
                  CornerRadius="0" 
                  Margin="1" 
                  Background="{DynamicResource BackBrush}"
                  BorderBrush="{DynamicResource SelectBrush}"
                  BorderThickness="0,0,0.7,0" />
            <Path 
                  x:Name="Arrow"
                  Grid.Column="1"     
                  Fill="White"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"
                />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                <Setter TargetName="Border" Property="Background" Value="#808080" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
                <Setter TargetName="Border" Property="Background" Value="#808080" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Border" Property="Background" Value="#EEEEEE" />
                <Setter TargetName="Border" Property="BorderBrush" Value="#AAAAAA" />
                <Setter Property="Foreground" Value="#888888"/>
                <Setter TargetName="Arrow" Property="Fill" Value="#888888" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
    </ControlTemplate>
    <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="MinWidth" Value="50"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="Foreground" Value="{DynamicResource FrontBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <ToggleButton 
                            Name="ToggleButton" 
                            Template="{DynamicResource ComboBoxToggleButton}" 
                            Grid.Column="2" 
                            Focusable="false"
                            IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                            ClickMode="Press">
                        </ToggleButton>
                        <ContentPresenter Name="ContentSite" IsHitTestVisible="False"  Content="{TemplateBinding SelectionBoxItem}"
                            ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                            Margin="3,3,23,3"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Left" />
                        <TextBox x:Name="PART_EditableTextBox"
                            Style="{x:Null}" 
                            Template="{DynamicResource ComboBoxTextBox}" 
                            HorizontalAlignment="Left" 
                            VerticalAlignment="Center" 
                            Margin="3,3,23,3"
                            Focusable="True" 
                            Background="{DynamicResource BackBrush}"
                            Foreground="{DynamicResource FrontBrush}"
                            Visibility="Hidden"
                            IsReadOnly="{TemplateBinding IsReadOnly}"/>
                        <Popup 
                            Name="Popup"
                            Placement="Bottom"
                            IsOpen="{TemplateBinding IsDropDownOpen}"
                            AllowsTransparency="True" 
                            Focusable="False"
                            PopupAnimation="Slide">
                            <Grid Name="DropDown"
                              SnapsToDevicePixels="True"                
                              MinWidth="{TemplateBinding ActualWidth}"
                              MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border 
                                x:Name="DropDownBorder"
                                Background="{DynamicResource BackBrush}"
                                BorderThickness="1"
                                BorderBrush="{DynamicResource SplitBrush}"/>
                                <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#888888"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0"/>
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEditable"  Value="true">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
        </Style.Triggers>
    </Style>

    <!-- SimpleStyles: ComboBoxItem -->
    <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Foreground" Value="{DynamicResource FrontBrush}"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border Name="Border"
                              Padding="2"
                              SnapsToDevicePixels="true">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource SplitBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#888888"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Expander style -->
    <Style TargetType="Expander">
        <Setter Property="Foreground" Value="{DynamicResource SelectBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <!-- Control template for expander -->
                <ControlTemplate TargetType="Expander">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Name="ContentRow" Height="0"/>
                        </Grid.RowDefinitions>
                        <Border
                                Name="Border"
                                Grid.Row="0"
                                CornerRadius="4,4,0,0" >
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="22" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <!-- The following puts the toggle button in the right hand column, just like I want! -->
                                <ToggleButton
                                        Grid.Column="0"
                                        IsChecked="{Binding Path=IsExpanded,Mode=TwoWay,
                                                            RelativeSource={RelativeSource TemplatedParent}}"
                                        OverridesDefaultStyle="True"
                                        Template="{DynamicResource ComboBoxToggleButton}"/>
                                <ContentPresenter
                                        Grid.Column="1"
                                        Margin="13"
                                        ContentSource="Header"
                                        RecognizesAccessKey="True" />
                            </Grid>
                        </Border>
                        <Border
                                Name="Content"
                                Grid.Row="1"
                                BorderThickness="1,1,1,1"
                                CornerRadius="0,0,4,4" >
                            <ContentPresenter Margin="4" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ContentRow" Property="Height"
                                    Value="{Binding ElementName=Content,Path=DesiredHeight}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Slider Style -->
    <SolidColorBrush x:Key="CyanBrush" Color="#00BCD4" />
    <SolidColorBrush x:Key="PinkBrush" Color="#DB167C" />
    <SolidColorBrush x:Key="LimeBrush" Color="#0BE182" />
    <Style x:Key="SliderThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Ellipse Fill="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type Slider}, Mode=FindAncestor}}" Width="18" Height="18"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- このサンプルでは、簡潔に記述する為に全て Foreground を基準に色を決定しています。個別に指定する場合は、適宜書き換えてください -->
    <Style x:Key="CustomSliderStyle" TargetType="{x:Type Slider}">
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <!-- 横置きの場合 -->
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="25" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <!-- 上の目盛り -->
                                <TickBar Grid.Row="0" x:Name="TopTick" Placement="Top" Visibility="Collapsed" Fill="{TemplateBinding Foreground}" Height="8" Opacity="0.64" Margin="0,0,0,2" />

                                <!-- 下の目盛り -->
                                <TickBar Grid.Row="2" x:Name="BottomTick" Placement="Bottom" Visibility="Collapsed" Fill="{TemplateBinding Foreground}" Height="8" Opacity="0.64" Margin="0,2,0,0" />

                                <Track Grid.Row="1" x:Name="PART_Track">
                                    <!-- 減少側のトラック（レール） -->
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Command="Slider.DecreaseLarge" Background="{TemplateBinding Foreground}" Height="5" BorderBrush="{x:Null}" Opacity="0.2"/>
                                    </Track.DecreaseRepeatButton>

                                    <!-- 増加側のトラック（レール） -->
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Command="Slider.IncreaseLarge" Background="{TemplateBinding Foreground}" Height="5" BorderBrush="{x:Null}" Opacity="0.5"/>
                                    </Track.IncreaseRepeatButton>

                                    <!-- つまみ -->
                                    <Track.Thumb>
                                        <Thumb Style="{DynamicResource SliderThumbStyle}"/>
                                    </Track.Thumb>
                                </Track>
                            </Grid>
                            <!-- TickPlacement の設定によって目盛りの表示を切り替え -->
                            <ControlTemplate.Triggers>
                                <Trigger Property="Slider.TickPlacement" Value="TopLeft">
                                    <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
                                </Trigger>
                                <Trigger Property="Slider.TickPlacement" Value="BottomRight">
                                    <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
                                </Trigger>
                                <Trigger Property="Slider.TickPlacement" Value="Both">
                                    <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
                                    <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <!-- 縦置きの場合 -->
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="25" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <!-- 左の目盛り -->
                                <TickBar Grid.Column="0" x:Name="LeftTick" Placement="Left" Visibility="Collapsed" Fill="{TemplateBinding Foreground}" Width="8" Opacity="0.64" Margin="0,0,2,0" />

                                <!-- 右の目盛り -->
                                <TickBar Grid.Column="2" x:Name="RightTick" Placement="Right" Visibility="Collapsed" Fill="{TemplateBinding Foreground}" Width="8" Opacity="0.64" Margin="2,0,0,0" />

                                <Track Grid.Column="1" x:Name="PART_Track" IsDirectionReversed="true">
                                    <!-- 減少側のトラック（レール） -->
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Command="Slider.DecreaseLarge" Background="{TemplateBinding Foreground}" Width="5" BorderBrush="{x:Null}" Opacity="0.2"/>
                                    </Track.DecreaseRepeatButton>

                                    <!-- 増加側のトラック（レール） -->
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Command="Slider.IncreaseLarge" Background="{TemplateBinding Foreground}" Width="5" BorderBrush="{x:Null}" Opacity="0.5"/>
                                    </Track.IncreaseRepeatButton>

                                    <!-- つまみ -->
                                    <Track.Thumb>
                                        <Thumb Style="{DynamicResource SliderThumbStyle}"/>
                                    </Track.Thumb>
                                </Track>
                            </Grid>
                            <!-- TickPlacement の設定によって目盛りの表示を切り替え -->
                            <ControlTemplate.Triggers>
                                <Trigger Property="Slider.TickPlacement" Value="TopLeft">
                                    <Setter TargetName="LeftTick" Property="Visibility" Value="Visible" />
                                </Trigger>
                                <Trigger Property="Slider.TickPlacement" Value="BottomRight">
                                    <Setter TargetName="RightTick" Property="Visibility" Value="Visible" />
                                </Trigger>
                                <Trigger Property="Slider.TickPlacement" Value="Both">
                                    <Setter TargetName="LeftTick" Property="Visibility" Value="Visible" />
                                    <Setter TargetName="RightTick" Property="Visibility" Value="Visible" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>


    <!-- Scrole style -->
    <Style x:Key="ScrollBarTrackThumb"
        TargetType="{x:Type Thumb}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid x:Name="Grid">
                        <Rectangle HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                Width="Auto"
                                Height="Auto"
                                Fill="Transparent" />
                        <Border x:Name="CornerScrollBarRectangle"
                            CornerRadius="5"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            Width="Auto"
                            Height="Auto"
                            Margin="0" Background="{DynamicResource SelectBrush_Dark}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Tag" Value="Horizontal">
                            <Setter TargetName="CornerScrollBarRectangle"
                                Property="Width" Value="Auto" />
                            <Setter TargetName="CornerScrollBarRectangle" Property="Height" Value="6" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsFlicksEnabled"
            Value="False" />
        <Setter Property="Visibility"
            Value="Hidden" />
        <Setter Property="Foreground"
            Value="#ADABAB" />
        <Setter Property="Background"
            Value="Transparent" />
        <Setter Property="Width"
            Value="{DynamicResource TrackWidth}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <!-- Grip Width -->
                    <Grid x:Name="GridRoot"
                        Width="{DynamicResource TrackWidth}"
                        Background="{TemplateBinding Background}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="0.00001*" />
                        </Grid.RowDefinitions>
                        <Track x:Name="PART_Track"
                            Grid.Row="0"
                            IsDirectionReversed="true"
                            Focusable="false">
                            <Track.Thumb>
                                <Thumb x:Name="Thumb"
                                    Background="{TemplateBinding Foreground}"
                                    Style="{DynamicResource ScrollBarTrackThumb}" />
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton x:Name="PageUp"
                                            Command="ScrollBar.PageDownCommand"
                                            Opacity="0"
                                            Focusable="false" />
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton x:Name="PageDown"
                                            Command="ScrollBar.PageUpCommand"
                                            Opacity="0"
                                            Focusable="false" />
                            </Track.DecreaseRepeatButton>
                        </Track>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="Thumb"
                                Property="IsMouseOver"
                                Value="true">
                            <Setter Value="{DynamicResource ButtonSelectBrush}"
                                TargetName="Thumb"
                                Property="Background" />
                        </Trigger>
                        <Trigger SourceName="Thumb"
                                Property="IsDragging"
                                Value="true">
                            <Setter Value="{DynamicResource DarkBrush}"
                                TargetName="Thumb"
                                Property="Background" />
                        </Trigger>

                        <Trigger Property="IsEnabled"
                                Value="false">
                            <Setter TargetName="Thumb"
                                Property="Visibility"
                                Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Orientation"
                                Value="Horizontal">
                            <Setter TargetName="GridRoot"
                                Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_Track"
                                Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Width"
                                Value="Auto" />
                            <Setter Property="Height"
                                Value="8" />
                            <Setter TargetName="Thumb"
                                Property="Tag"
                                Value="Horizontal" />
                            <Setter TargetName="PageDown"
                                Property="Command"
                                Value="ScrollBar.PageLeftCommand" />
                            <Setter TargetName="PageUp"
                                Property="Command"
                                Value="ScrollBar.PageRightCommand" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="false">
                            <Setter Property="Visibility" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>